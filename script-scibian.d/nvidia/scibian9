#!/bin/sh
set -e


TRIPLETS="/ /i386-linux-gnu/ /x86_64-linux-gnu/ /arm-linux-gnueabihf/"

add_slave()
{
	local target_link name source_path prefix
	target_link="$1"
	name="$2"
	source_path="$3"
	prefix="nvidia--"

	if [ -f "${source_path}" ] && [ -d "$(dirname "${target_link}")" ]; then
		echo --slave "${target_link}" "${prefix}${name}" "${source_path}"
	fi
}

add_multiarch_slave()
{
	local target_dir target_sub_dir file source_dir source_sub_dir prefix suffix triplet
	target_dir="$1"
	target_sub_dir="$2"
	file="$3"
	source_dir="$4"
	source_sub_dir="$5"
	prefix="$6"

	for triplet in $TRIPLETS ; do
		# s|/$||; s|^/|-|;
		suffix="${triplet%/}"
		suffix="${suffix:+-${suffix#/}}"
		add_slave \
			"${target_dir}${triplet}${target_sub_dir}${file}" \
			"${prefix}${file}${suffix}" \
			"${source_dir}${triplet}${source_sub_dir}${file}"
	done
}

# A trigger that handles the alternatives for /usr/lib[/<triplet>]/nvidia/*.*
if [ "$1" = "triggered" ]; then

	slaves="
		$(add_multiarch_slave /usr/lib nvidia/ libGL.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib nvidia/ libEGL.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib nvidia/ libGLESv1_CM.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib nvidia/ libGLESv2.so.2 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib nvidia/ libnvidia-cfg.so.1 /usr/lib nvidia/edc/)
		$(add_slave /usr/lib/nvidia/libglx.so libglx.so /usr/lib/nvidia/edc/)
		$(add_slave /usr/lib/nvidia/nvidia_drv.so nvidia_drv.so /usr/lib/nvidia/edc/)
		$(add_multiarch_slave /usr/lib vdpau/ libvdpau_nvidia.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libGLX_nvidia.so.0 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libEGL_nvidia.so.0 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libGLESv1_CM_nvidia.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libGLESv2_nvidia.so.2 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libcuda.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libcuda.so /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libnvcuvid.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libnvcuvid.so /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libnvidia-encode.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libnvidia-fbc.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libnvidia-ifr.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libnvidia-ml.so.1 /usr/lib nvidia/edc/)
		$(add_multiarch_slave /usr/lib "" libnvidia-opencl.so.1 /usr/lib nvidia/edc/)
"
	minor_slaves="
		$(add_multiarch_slave /usr/lib "" libGL.so.1 /usr/lib nvidia/glvnd/)
		$(add_multiarch_slave /usr/lib "" libGLX.so.0 /usr/lib nvidia/glvnd/)
		$(add_multiarch_slave /usr/lib "" libGLdispatch.so.0.0.0 /usr/lib nvidia/glvnd/)
"
	if echo "$slaves" | grep -q "slave" ; then
		update-alternatives --display glx > /dev/null 2>&1 && update-alternatives --remove-all glx
		update-alternatives --install /usr/lib/nvidia/nvidia nvidia /usr/lib/nvidia/edc 919 $slaves $minor_slaves
	else
		update-alternatives --remove nvidia /usr/lib/nvidia/edc
	fi

	# activate the trigger selecting NVIDIA as GLX provider
	dpkg-trigger --by-package nvidia-alternative --no-await register-glx-alternative-nvidia

fi


if [ "$1" = remove ]; then
    update-alternatives --remove nvidia /usr/lib/nvidia/edc
fi

if [ -z "$1" ]; then
    exec "$0" triggered
fi

